var t = require("../../utils/util.js"), e = getApp(), a = null, n = null; Page({ data: { storeId: e.globalData.storeId || "", store: e.globalData.store || "", isIpx: e.globalData.isIpx, inventories: [], confirmModal: !1 }, onLoad: function (t) { var a = this; console.info("options", t), wx.showLoading({ title: "获取可用档期" }); var n = new Date, i = n.getFullYear(), o = n.getMonth() + 1, r = n.getFullYear(), s = n.getMonth() + 1, c = n.getDate(), u = ["日", "一", "二", "三", "四", "五", "六"]; this.setData({ cur_year: r, cur_month: s, cur_day: c, today: this.formatDate(r, s, c), now_year: i, now_month: o, weeks_ch: u, cur_weekday: null, cur_date: null, cur_inventories: [], cur_inventory: null, cur_inventory_label: "" }), e.globalData.storeId = t.store_id, this.initStoreSchedule(t.store_id, function () { a.calculateEmptyGrids(r, s), a.calculateDays(r, s) }) }, onReady: function () { }, onShow: function () { }, onHide: function () { }, onUnload: function () { }, onPullDownRefresh: function () { }, onReachBottom: function () { }, onShareAppMessage: function () { }, initStoreSchedule: function (a, n) { var i = this, o = this.data.today.replace(/\-/g, ""); e.getRequest(e.globalData.BASE_URL + "/stores/" + a + "/calendar?from=" + o + "&to=20181231", {}).then(function (a) { var o = []; a.forEach(function (a) { "weekend" === e.globalData.cart.inventory_restrictions && t.isWeekend(a.date) || o.push(a) }); var r = (o = o.sort(function (t, e) { return +new Date(t.date) - +new Date(e.date) }))[o.length - 1].date, s = r.split("-")[0], c = r.split("-")[1], u = r.split("-")[2]; o.forEach(function (t) { t.inventories.forEach(function (t) { t.sku_title = t.sku.indexOf("am") > -1 ? "9:30" : "14:30" }) }), i.setData({ inventories: o, the_last_date: r, the_last_year: s, the_last_month: c, the_last_day: u }), n && n() }) }, convertCalendarAPI: function (t) { var e = {}, a = []; t.forEach(function (t) { var a = void 0; e[t.date] || (e[t.date] = []), e[t.date].forEach(function (e) { e.sku === t.sku && (a = !0) }), !a && e[t.date].push({ sku: t.sku, sku_title: t.sku.indexOf("am") > -1 ? "9:30" : "14:30", version: t.version, id: t.id }) }); for (var n in e) a.push({ date: n, inventories: e[n].sort(function (t, e) { return e.sku < t.sku }) }); return a }, getInventoriesByDate: function (t) { var e = []; return this.data.inventories && this.data.inventories.forEach(function (a) { a.date === t && (e = a.inventories) }), e }, getWeekdayStrByDate: function (t) { return this.data.weeks_ch[new Date(t).getDay()] }, chooseInventory: function (t) { var a = t.detail.value, n = void 0, i = this.data.cur_date && this.getWeekdayStrByDate(this.data.cur_date); this.data.inventories.forEach(function (t) { t.inventories.forEach(function (t) { t.id === a && (n = t) }) }), console.info("inventoryId", a), console.info("inventory", n), console.info("weekday", i), this.setData({ cur_inventory: n, cur_weekday: i, cur_inventory_label: this.data.cur_year + "年" + this.data.cur_month + "月" + this.data.cur_day + "日(周" + i + ") " + n.sku_title }), e.globalData.cart.inventory = n }, checkDateValid: function (t) { console.log("choosedDate", t); var e = !1; return this.data.inventories.forEach(function (a) { a.date == t && (e = !0) }), e }, getThisMonthDays: function (t, e) { return new Date(t, e, 0).getDate() }, getFirstDayOfWeek: function (t, e) { return new Date(Date.UTC(t, e - 1, 1)).getDay() }, calculateEmptyGrids: function (t, e) { var a = this.getFirstDayOfWeek(t, e), n = []; if (a > 0) { for (var i = 0; i < a; i++)n.push(i); this.setData({ hasEmptyGrid: !0, empytGrids: n }) } else this.setData({ hasEmptyGrid: !1, empytGrids: [] }) }, calculateDays: function (t, e) { for (var a = [], n = this.getThisMonthDays(t, e), i = (new Date).getDate(), o = 1; o <= n; o++) { var r = this.formatDate(t, e, o); a.push({ day: o, choosed: o == i, date: r, inventories: this.getInventoriesByDate(r) }) } this.setData({ days: a }), wx.hideLoading() }, handleCalendar: function (t) { var e = t.currentTarget.dataset.handle, a = this.data.cur_year, n = this.data.cur_month; if ("prev" === e) { var i = n - 1, o = a; i < 1 && (o = a - 1, i = 12), this.calculateDays(o, i), this.calculateEmptyGrids(o, i), this.setData({ cur_year: o, cur_month: i }) } else { var r = n + 1, s = a; r > 12 && (s = a + 1, r = 1), this.calculateDays(s, r), this.calculateEmptyGrids(s, r), this.setData({ cur_year: s, cur_month: r }) } }, formatDate: function (t, e, a) { return t + "-" + (e > 9 ? e : "0" + (e - 0)) + "-" + (a > 9 ? a : "0" + (a - 0)) }, chooseDate: function (t) { console.log("this.data.selected", this.data.selected); var e = t.currentTarget.dataset.idx, a = this.data.days, n = this.formatDate(this.data.cur_year, this.data.cur_month, a[e].day); this.checkDateValid(n) && (a.forEach(function (t) { t.choosed = !1 }), this.data.selected = a[e].date, this.setData({ days: a, cur_date: this.data.selected, cur_day: a[e].day, cur_inventories: a[e].inventories, cur_inventory: null, cur_inventory_label: null })) }, chooseYearAndMonth: function () { var t = this.data.cur_year, e = this.data.cur_month; a = this.data.cur_year, n = this.data.cur_month; for (var i = [], o = [], r = 1900; r <= 2100; r++)i.push(r); for (var s = 1; s <= 12; s++)o.push(s); var c = i.indexOf(t), u = o.indexOf(e); this.setData({ picker_value: [c, u], picker_year: i, picker_month: o, showPicker: !0 }) }, pickerChange: function (t) { var e = t.detail.value; a = this.data.picker_year[e[0]], n = this.data.picker_month[e[1]] }, tapPickerBtn: function (t) { var e = { showPicker: !1 }; "confirm" === t.currentTarget.dataset.type && (e.cur_year = a, e.cur_month = n, this.calculateEmptyGrids(a, n), this.calculateDays(a, n)), this.setData(e) }, closeModal: function () { }, openModal: function () { var t = this.data.cur_inventory_label; this.data.store.name; wx.showModal({ title: "确认已选档期", content: "" + t, showCancel: !0, cancelText: "重选", cancelColor: "#C2A469", confirmText: "确认", confirmColor: "#259B24", success: function (a) { a.confirm && (e.globalData.cart.inventory_label = t, wx.navigateTo({ url: "/pages/order-info/order-info", success: function (t) { }, fail: function (t) { }, complete: function (t) { } })) }, fail: function (t) { }, complete: function (t) { } }) }, confirmHandler: function () { wx.navigateTo({ url: "/pages/order-detail/order-detail", success: function (t) { }, fail: function (t) { }, complete: function (t) { } }), this.setData({ confirmModal: !1 }) } }); 